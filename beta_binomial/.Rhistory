clopper_pearson(x = 507,
n = 508,
alpha = alpha) -> Arm1b_spec_dg_cp
Arm1b_spec_dg_cp
Arm1b_spec_dg_cp$upper > thresholds[["spec_22q"]]
truth_reference %>%
filter(arm == "Arm_1b" &
aneuploidy_truth == "NEGATIVE" &
ga >= 70) %>%
select(blinded_caseid, original_caseid) -> Arm1b_nc_caseids
Arm1b_nc_caseids <- rbind(Arm1b_nc_caseids, Arm1a_nc_caseids)
nrow(Arm1b_nc_caseids) == 543
validation_data %>%
filter(casefile_id %in% Arm1b_nc_caseids$blinded_caseid) %>%
select(casefile_id, DOR, caseLevelResultCode) %>%
left_join(Arm1b_nc_caseids,
by = c("casefile_id" = "blinded_caseid")) -> nc_1b
table(nc_1b$caseLevelResultCode)
nc_1b %>%
filter(caseLevelResultCode == "SUSPECTED_MULTIPLE_GESTATION_OR_PATERNAL_TRIPLOIDY")
nc_1b %>%
filter(str_detect(caseLevelResultCode, "^NO_CALL"))
clopper_pearson(x = 6 + 6,
n = 549,
alpha = alpha) -> Arm1b_nc_cp
Arm1b_nc_cp
Arm1b_nc_cp$lower < thresholds[["NC_rate"]]
truth_reference %>%
filter(arm == "Arm_2") %>%
select(blinded_caseid, original_caseid, dg_truth) -> Arm2_truth
length(unique(Arm2_truth$blinded_caseid)) == 88
validation_data %>%
filter(casefile_id %in% Arm2_truth$blinded_caseid) %>%
select(casefile_id, plasmaSampleId, caseLevelResultCode, DOR, diGeorgeResult) -> Arm2_validation_data
left_join(Arm2_truth,
Arm2_validation_data,
by = c("blinded_caseid" = "casefile_id")) -> Arm2_df
Arm2_df %>%
filter(blinded_caseid == 9296360)
Arm2_df %>%
filter(diGeorgeResult %in% c("REFLEX_RECOMMENDED", ""))  %>%
select(-DOR, -plasmaSampleId) %>%
arrange(original_caseid)
arm2_results <- Arm2_df %>%
select(blinded_caseid, dg_truth, diGeorgeResult) %>%
mutate(outcome = if_else((diGeorgeResult %in% c("HIGH_PROB_POSITIVE_RESULT",
"REFLEX_RECOMMENDED") &
dg_truth == "22q") |
(diGeorgeResult %in% c("HIGH_PROB_NEGATIVE_RESULT",
"MATERNAL_PROB_OF_MD_UNCHANGED",
"PROB_OF_MD_UNCHANGED") &
dg_truth == "negative"), 1, 0)) %>%
rename(phase_0_result = diGeorgeResult,
casefile_id = blinded_caseid) %>%
select(casefile_id, phase_0_result, outcome)
arm2_results
Arm2_df %>%
filter(diGeorgeResult %in% c("HIGH_PROB_NEGATIVE_RESULT", "") &
dg_truth == "22q")
Arm2_df %>%
pull(blinded_caseid) %>% paste(collapse=", ")
table(Arm2_df$dg_truth, Arm2_df$diGeorgeResult)
table(Arm2_df$DOR, Arm2_df$diGeorgeResult)
clopper_pearson(x = 48, n = 63, alpha = .05)
clopper_pearson(x = 15, n = 31, alpha = .05)
table(Arm2_df$dg_truth, Arm2_df$diGeorgeResult)["22q", ]
16/17 # TP called P
table(Arm2_df$dg_truth, Arm2_df$diGeorgeResult)[, "HIGH_PROB_POSITIVE_RESULT"]
16/17 # TP/P
table(Arm2_df$dg_truth, Arm2_df$diGeorgeResult)["negative", ]
44/(15+15+27+2) # TN called N
44/(30+27+2)
63-4
dg_prevalence <- 1/5000
n_sims <- 100000
sim_ppv <- sim_sens <- sim_spec <- vector(mode = "numeric", length = n_sims)
tp_idx <- which(Arm2_df$dg_truth == "22q")
tn_idx <- which(Arm2_df$dg_truth == "negative")
for (i in 1:n_sims) {
sens_random_idx <- sample(x=tp_idx,
size=25,
replace=TRUE)
spec_random_idx <- sample(x=tn_idx,
size=63,
replace=TRUE)
sens_Arm2_df_tmp <- Arm2_df[sens_random_idx,]
spec_Arm2_df_tmp <- Arm2_df[spec_random_idx,]
sens_estimate <- sum(sens_Arm2_df_tmp$diGeorgeResult %in% dg_high_risk_statuses)/sum(!sens_Arm2_df_tmp$diGeorgeResult == "")
sim_sens[i] <- sens_estimate
spec_estimate <- sum(!(spec_Arm2_df_tmp$diGeorgeResult %in% dg_high_risk_statuses))/nrow(spec_Arm2_df_tmp)
sim_spec[i] <- spec_estimate
sim_ppv[i] <- (sens_estimate*dg_prevalence)/((sens_estimate*dg_prevalence + (1-spec_estimate)*(1-dg_prevalence)))
}
hist(sim_sens, breaks=20); abline(v=mean(sim_sens), col="red"); summary(sim_sens)
hist(sim_spec, breaks=20); abline(v=mean(sim_spec), col="red"); summary(sim_spec)
hist(sim_ppv); abline(v=mean(sim_ppv), col="red"); summary(sim_ppv)
mean(sim_ppv > .305)
sim_ppv <- sim_sens <- sim_spec <- vector(mode = "numeric", length = n_sims)
for (i in 1:n_sims) {
random_idx <- sample(x=1:76,
size=76,
replace=TRUE)
Arm2_df_tmp <- Arm2_df[random_idx,]
sim_ppv[i] <- table(Arm2_df_tmp$dg_truth,
Arm2_df_tmp$diGeorgeResult)["22q","HIGH_PROB_POSITIVE_RESULT"]/
sum(table(Arm2_df_tmp$dg_truth,
Arm2_df_tmp$diGeorgeResult)[,"HIGH_PROB_POSITIVE_RESULT"])
}
hist(sim_ppv); abline(v=mean(sim_ppv), col="red"); summary(sim_ppv)
mean(sim_ppv > .305)
truth_reference %>%
select(blinded_caseid,
original_caseid,
case_category,
arm,
aneuploidy_truth,
dg_truth) -> case_and_truth
validation_data %>%
select(casefile_id,
caseLevelResultCode,
trisomy13Result,
trisomy18Result,
trisomy21Result,
monosomyXResult,
diGeorgeResult) -> phase_0_results
left_join(case_and_truth,
phase_0_results,
by = c("blinded_caseid" = "casefile_id")) -> manifest
rbind(
t21_1b_results,
t18_1b_results,
t13_1b_results,
mx_1b_results,
dg_1b_results,
spec_1b_results,
arm2_results
) -> results
left_join(manifest,
results,
by = c("blinded_caseid" = "casefile_id")) -> final_manifest
final_manifest %>%
select(-arm, -phase_0_result) %>%
rename(aneuploidy_outcome = outcome) -> final_manifest
colnames(final_manifest)
final_manifest %>%
mutate(
aneuploidy_outcome = if_else(aneuploidy_outcome == 1,
"correct", "incorrect"),
dg_truth = stringr::str_to_lower(dg_truth),
dg_outcome = case_when(
dg_truth == "unknown" ~ "unknown",
dg_truth == "negative" &
diGeorgeResult %in% c("HIGH_PROB_NEGATIVE_RESULT",
"HAPLOBLOCK_MATERNAL",
"MATERNAL_DUP",
"MATERNAL_PROB_OF_MD_UNCHANGED",
"PROB_OF_MD_UNCHANGED") ~ "correct",
dg_truth == "affected" &
diGeorgeResult %in% c("HIGH_PROB_POSITIVE_RESULT",
"REPORTABLE_MATERNAL_DEL") ~ "correct",
dg_truth == "22q" &
diGeorgeResult %in% c("HIGH_PROB_POSITIVE_RESULT",
"REPORTABLE_MATERNAL_DEL",
"REFLEX_RECOMMENDED") ~ "correct",
TRUE ~ "incorrect"
)) -> final_manifest
final_manifest[final_manifest$aneuploidy_truth == "UNKNOWN","aneuploidy_outcome"] <- "unknown"
final_manifest %>%
filter(blinded_caseid %in% Arm1b_aneu_spec_caseids$blinded_caseid) %>%
select(dg_outcome) %>% table()
final_manifest %>%
filter(blinded_caseid %in% Arm1b_MX_caseids$blinded_caseid) %>%
select(aneuploidy_outcome) %>% table()
final_manifest %>%
select(-original_caseid) %>%
write.csv(., "SEC-15351-Sample-Manifest.csv")
final_manifest %>%
select(-aneuploidy_outcome, -dg_outcome) %>%
write.csv(., "SEC-15351-Sample-Manifest-QA.csv")
qs_caseids <- read_csv("QS_caseids.csv")
nrow(qs_caseids)
duplicated(qs_caseids$`Case ID`)
validation_data %>%
filter(casefile_id %in% qs_caseids$`Case ID`) -> QS_results
qs_caseids[!qs_caseids$`Case ID` %in% QS_results$casefile_id, ]
write.csv(., "QS_Cases_Phase_0_Results.csv")
arm2_results
Arm2_df %>%
filter(diGeorgeResult %in% c("HIGH_PROB_NEGATIVE_RESULT", "") &
dg_truth == "22q")
Arm2_df %>%
pull(blinded_caseid) %>% paste(collapse=", ")
table(Arm2_df$dg_truth, Arm2_df$diGeorgeResult)
table(Arm2_df$DOR, Arm2_df$diGeorgeResult)
clopper_pearson(x = 48, n = 63, alpha = .05)
clopper_pearson(x = 15, n = 31, alpha = .05)
table(Arm2_df$dg_truth, Arm2_df$diGeorgeResult)["22q", ]
validation_data %>%
filter(casefile_id %in% Arm2_truth$blinded_caseid) %>%
select(casefile_id, plasmaSampleId, caseLevelResultCode, DOR, diGeorgeResult) -> Arm2_validation_data
left_join(Arm2_truth,
Arm2_validation_data,
by = c("blinded_caseid" = "casefile_id")) -> Arm2_df
Arm2_df %>%
filter(blinded_caseid == 9296360)
table(Arm2_df$dg_truth, Arm2_df$diGeorgeResult)
Arm2_df %>%
filter(diGeorgeResult %in% c("HIGH_PROB_NEGATIVE_RESULT", "") &
dg_truth == "22q")
table(Arm2_df$dg_truth, Arm2_df$diGeorgeResult)
sum(table(Arm2_df$dg_truth, Arm2_df$diGeorgeResult))
table(Arm2_df$dg_truth, Arm2_df$diGeorgeResult)
table(Arm2_df$dg_truth, Arm2_df$diGeorgeResult)
Arm2_df %>%
filter(diGeorgeResult %in% c("HIGH_PROB_NEGATIVE_RESULT", "") &
dg_truth == "22q")
table(Arm2_df$dg_truth, Arm2_df$diGeorgeResult)
16+7
15+4
23+19
27+2+15
42+44+1
23/42
27+2+15
runApp('~/Documents/Shiny/beta_binomial/beta_binomial')
runApp('~/Documents/Shiny/beta_binomial/beta_binomial')
runApp('~/Documents/Shiny/beta_binomial/beta_binomial')
runApp('~/Documents/Shiny/beta_binomial/beta_binomial')
runApp()
seq(0, 1, by=.01)
length(seq(0, 1, by=.01))
runApp()
View(tmp_plot_data)
View(plot_data)
View(plot_data)
seq(0, 1, by=1/99)
k <- 1
is.numeric(k)
k < 1
stop("k must be a valid number")
qnorm(1-.05)
x <- data.frame(x = rnorm(20))
x
is.vector(x)
sort(x)
is.data.frame(x)
lob <- function(x, k = 20, method = "parametric", alpha = .05) {
if (is.data.frame(x))
x <- sort(x)
n <- length(x)
rp <- .5*n*(1-alpha)
mean_blank <- mean(x)
sd_blank <- sd(x)
if (!is.numeric(k) | k < 1) stop("k must be a valid number.")
Cp <- qnorm(1-alpha)/(1-(1/(4*(n-k))))
if (method == "parametric") {
return(
list(
lob = mean_blank + Cp*sd_blank,
mean_blank = mean_blank,
sd_blank = sd_blank,
n = n
)
)
} else if (method == "nonparametric") {
return(
list(
lob = x[floor(rp)] + (rp - floor(rp))*(x[ceiling(rp)] - x[floor(rp)]),
chosen_rank = rp,
mean_blank = mean_blank,
sd_blank = sd_blank,
n = n
)
)
} else {
stop("Entered method must be either 'parametric' or 'nonparametric'.")
}
}
x
x[,1]
calculate_lob <- function(x,
k = 20,
method = "parametric",
alpha = .05) {
if (is.data.frame(x)) x <- x[,1] # Assume first column of data.frame is data
x <- sort(x)
n <- length(x)
rp <- .5*n*(1-alpha)
mean_blank <- mean(x)
sd_blank <- sd(x)
if (!is.numeric(k) | k < 1) stop("k must be a valid number.")
Cp <- qnorm(1-alpha)/(1-(1/(4*(n-k))))
if (method == "parametric") {
return(
list(
lob = mean_blank + Cp*sd_blank,
mean_blank = mean_blank,
sd_blank = sd_blank,
n = n
)
)
} else if (method == "nonparametric") {
return(
list(
lob = x[floor(rp)] + (rp - floor(rp))*(x[ceiling(rp)] - x[floor(rp)]),
chosen_rank = rp,
mean_blank = mean_blank,
sd_blank = sd_blank,
n = n
)
)
} else {
stop("Entered method must be either 'parametric' or 'nonparametric'.")
}
}
calculate_lob(x = x)
x <- data.frame(x = rnorm(20, mean = 1, sd = .2))
calculate_lob(x = x)
1/0
1 - (1/0)
return(
list(
lob = mean_blank + Cp*sd_blank,
mean_blank = mean_blank,
sd_blank = sd_blank,
corrected_quantile = Cp,
n = n
)
)
calculate_lob <- function(x,
k = 20,
method = "parametric",
alpha = .05) {
if (is.data.frame(x)) x <- x[,1] # Assume first column of data.frame is data
x <- sort(x)
n <- length(x)
rp <- .5*n*(1-alpha)
mean_blank <- mean(x)
sd_blank <- sd(x)
if (!is.numeric(k) | k < 1) stop("k must be a valid number.")
Cp <- qnorm(1-alpha)/(1-(1/(4*(n-k))))
if (method == "parametric") {
return(
list(
lob = mean_blank + Cp*sd_blank,
mean_blank = mean_blank,
sd_blank = sd_blank,
corrected_quantile = Cp,
n = n
)
)
} else if (method == "nonparametric") {
return(
list(
lob = x[floor(rp)] + (rp - floor(rp))*(x[ceiling(rp)] - x[floor(rp)]),
chosen_rank = rp,
mean_blank = mean_blank,
sd_blank = sd_blank,
n = n
)
)
} else {
stop("Entered method must be either 'parametric' or 'nonparametric'.")
}
}
x <- data.frame(x = rnorm(20, mean = 1, sd = .2))
calculate_lob(x = x)
2*3*4*2
calculate_lob(x = x, k = 4, method = "parametric")
calculate_lob(x = x, k = 4, method = "nonparametric")
calculate_lob <- function(x,
k,
method = "parametric",
alpha = .05) {
if (is.data.frame(x)) x <- x[,1] # Assume first column of data.frame is data
x <- sort(x)
n <- length(x)
rp <- .5 + n*(1-alpha)
mean_blank <- mean(x)
sd_blank <- sd(x)
if (!is.numeric(k) | k < 1) stop("k must be a valid number.")
Cp <- qnorm(1-alpha)/(1-(1/(4*(n-k))))
if (method == "parametric") {
return(
list(
lob = mean_blank + Cp*sd_blank,
mean_blank = mean_blank,
sd_blank = sd_blank,
corrected_quantile = Cp,
n = n
)
)
} else if (method == "nonparametric") {
return(
list(
lob = x[floor(rp)] + (rp - floor(rp))*(x[ceiling(rp)] - x[floor(rp)]),
chosen_rank = rp,
mean_blank = mean_blank,
sd_blank = sd_blank,
n = n
)
)
} else {
stop("Entered method must be either 'parametric' or 'nonparametric'.")
}
}
x <- data.frame(x = rnorm(20, mean = 1, sd = .2))
calculate_lob(x = x, k = 4, method = "parametric")
calculate_lob(x = x, k = 4, method = "nonparametric")
NS
calculate_lob <- function(x,
k,
method = "parametric",
alpha = .05) {
if (is.data.frame(x)) x <- x[,1] # Assume first column of data.frame is data
x <- sort(x)
n <- length(x)
rp <- .5 + n*(1-alpha)
mean_blank <- mean(x)
sd_blank <- sd(x)
if (!is.numeric(k) | k < 1) stop("k must be a valid number.")
Cp <- qnorm(1-alpha)/(1-(1/(4*(n-k))))
return(
list(
mean_blank = mean_blank,
sd_blank = sd_blank,
total_sample_size = n,
parametric_corrected_quantile = Cp,
nonparametric_chosen_rank = rp,
parametric_lob = mean_blank + Cp*sd_blank,
nonparametric_lob = x[floor(rp)] + (rp - floor(rp))*(x[ceiling(rp)] - x[floor(rp)])
)
)
}
x <- data.frame(x = rnorm(20, mean = 1, sd = .2))
calculate_lob <- function(x,
k,
alpha = .05) {
if (is.data.frame(x)) x <- x[,1] # Assume first column of data.frame is data
x <- sort(x)
n <- length(x)
rp <- .5 + n*(1-alpha)
mean_blank <- mean(x)
sd_blank <- sd(x)
if (!is.numeric(k) | k < 1) stop("k must be a valid number.")
Cp <- qnorm(1-alpha)/(1-(1/(4*(n-k))))
return(
list(
mean_blank = mean_blank,
sd_blank = sd_blank,
total_sample_size = n,
parametric_corrected_quantile = Cp,
nonparametric_chosen_rank = rp,
parametric_lob = mean_blank + Cp*sd_blank,
nonparametric_lob = x[floor(rp)] + (rp - floor(rp))*(x[ceiling(rp)] - x[floor(rp)])
)
)
}
x <- data.frame(x = rnorm(20, mean = 1, sd = .2))
calculate_lob(x = x, k = 4)
x <- data.frame(sample(A:C, 10))
x <- data.frame(sample(c("A", "B", "C"), 10))
sample(c("A", "B", "C"), 10, replace = TRUE)
boop <- sample(c("A", "B", "C"), 10, replace = TRUE)
as.factor(boop)
is.factor(boop)
data.frame(concentration = boop, measurement = rnorm(10))
goo <- data.frame(concentration = boop, measurement = rnorm(10))
goo
tmp_sd <- aggregate(measurement ~ concentration, data = goo, sd)
tmp_sd
str(tmp_sd)
colnames(tmp_sd) <- c("concentration", "sd")
tmp_sd
tmp <- goo
tmp
tmp_sd <- aggregate(measurement ~ concentration, data = tmp, FUN = function(x) c(sd(x), length(x)))
tmp_sd
colnames(tmp_sd) <- c("concentration", "sd", "n")
str(tmp_sd)
tmp_sd
str(tmp_sd)
colnames(tmp_sd)
tmp_sd
tmp_sd <- aggregate(measurement ~ concentration, data = tmp, FUN = function(x) c(sd(x), as.integer(length(x))))
tmp_sd
tmp_sd <- aggregate(measurement ~ concentration, data = tmp, FUN = function(x) list(sd = sd(x), n = length(x)))
tmp_sd
tmp_sd <- aggregate(measurement ~ concentration, data = tmp, FUN = function(x) c(sd = sd(x), n = length(x)))
tmp_sd
str(tmp_sd)
tmp_sd$measurement[,1]
tmp_sd[,c("concentration", "sd", "n")]
tmp_sd <- aggregate(measurement ~ concentration, data = tmp, FUN = function(x) c(sd = sd(x), n = length(x)))
tmp_sd$sd <- tmp_sd$measurement[,1]
tmp_sd$n <- tmp_sd$measurement[,2]
tmp_sd[,c("concentration", "sd", "n")]
tmp_sd
tmp_sd <- tmp_sd[,c("concentration", "sd", "n")]
tmp_sd
tmp_sd$n
tmp_sd$n - 1
sum(tmp_sd$n - 1)
tmp_sd$sd * (tmp_sd$n - 1)
2*5.85
nrow(tmp_sd)
.3741+.0149*.51+.0055*.51^2
sdwl <- function(x) .3741+.0149*x + .0055*x^2
sdwl(.51)
seq(.5, 1.3, step=.1)
seq(.5, 1.3, by=.1)
sdwl(seq(.5, 1.3, by=.1))
